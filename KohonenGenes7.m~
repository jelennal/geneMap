% read data 
dataInfo = load('SoCS_SampleInfo.txt');

data = load('NS_660755markersPreprocessed.txt');
[allMarkers, nPersons] = size(data);
input = data';

%% --------------------------------------------------- parameters!!!
% define all the parameters
p.xOut = 50;                       
p.yOut = 50;
p.nEpochs = 200;  %100                 
p.nCEpochs = 0; %40

% initializing learning rate 
eta0 = 0.2;       %0.05                          % 0.3 standards    
nOrderIter = nPersons*20*floor(sqrt(xOut*yOut)/10 + 0.5);

% for convergence phase - Should we even have a convergence phase?
% ANS: this is just in case we happen to use convergence in the future 
eta = 0.01;
sigma = 0.5;

% initializing learning rate and radius of attention 
% distance between the last and the first neuron -------------------------------------- !!!!!!!!!!!!
%nOrderIter = nPersons*nEpochs;

factorTau1 = 2;
factorTau2 = 2;                                 % how much of a slow-down
factorSigma0 = 1;

Tau1 = factorTau1*nOrderIter;
sigma0 = factorSigma0*norm([1 1] - [xOut yOut]); %norm([1 1] - [xOut yOut]);
Tau2 = factorTau2*Tau1/(log(sigma0)); %nOrderIter/(log(sigma0));

%% --------------------------------------------------- INPUT SETUP 
% Basic parameters
nMarkers = 1043;  
nOut = xOut*yOut;

% for ordering phase
classType = 3;                   % try 1,2
makeMovie = 1;

% for convergence phase
% recommended nConvIter = nCEpochs*nPersons = 1000*nOut;
nConvIter = nMarkers*nCEpochs;                % change into more, by far the slowest part


% for validation (if used)
includeValidation = 0;                % ### try 1, to include separate validation&test sets
valPerc = 0.2;     
  
 % normalization                                              
 meanInput = mean(input);
 sdInput = std(input);
 for index = 1:nMarkers
   input(:,index)=(input(:,index) - meanInput(index)*ones(size(input(:,index))))./sdInput(index);
 end
 

 % formation of validation set
 if includeValidation
     personPerm = sort(randperm(nPersons, round(valPerc*nPersons)));
     remainsPerm = setdiff(1:nPersons, personPerm);

     validSet =  input(personPerm, :);
     validInfo = dataInfo(:, personPerm);
     input = input(remainsPerm, :);    
     dlmwrite('SoCS_SampleInfo.txt', dataInfo(:, remainsPerm));

     nPersons = size(input, 1);
 end
 
 disp('Preprocessing of data - Done')
 
 
  
%% ------------------------------------------------- NETWORK SETUP 
% number of iterations in classification and convergence phase

% initializing weights 
initVar = 0.01; 
w = initVar*(2*rand(nOut, nMarkers) - ones(nOut, nMarkers));

currentIteration = 0;
%% ----------------------------------------------------------- PCA 
A = FormAdjacencyMatrix(xOut, yOut);
[coeffMatrix, dataProjection] = FindPCA(input);


%% ------------------------------------------------ ORDERING PHASE 1
%[w, frame] = OrderingPhase3(w, input, nEpochs, xOut, yOut, makeMovie, coeffMatrix, dataProjection, classType, A);
%[w, frame] = OrderingPhase2(w, input, xOut, yOut, sigma0, eta0, makeMovie, coeffMatrix, dataProjection, classType, A);

[w, frame] = OrderingPhaseMeasures(w, input, nEpochs, xOut, yOut, sigma0, Tau2, eta0, Tau1, makeMovie, coeffMatrix, dataProjection, classType, A, 0);


%% --------------------------------------------- CONVERGENCE PHASE
[w, cframe] = ConvergencePhase(w, input, nCEpochs, xOut, yOut, sigma, eta, makeMovie, coeffMatrix, dataProjection, classType, A);

%% ------------------------------------------ PLOT WINNING NEURONS 
% find winners and define groups
if includeValidation
 classType = 3;   
 [vGroups, vsharedWinners] = FindWinnersFinal3(validSet, w, xOut, yOut, classType, validInfo);  
 [Groups, sharedWinners] = FindWinnersFinal2(input, w, xOut, yOut, classType);
 % plot kohonen map
 PlotKohonenMap3(Groups, vGroups, classType, xOut, yOut);   
else    
 [Groups, sharedWinners] = FindWinnersFinal2(input, w, xOut, yOut, classType);
 % plot kohonen map
 PlotKohonenMap2(Groups, classType, xOut, yOut, sharedWinners);
end

%% --------------------------------------------- COMPARE WITH PCA
figure(2)
pcaGroups = PlotPCA(coeffMatrix, dataProjection, classType, w, A);


% save results
fileName = strcat('DATAX',int2str(xOut),'Y',int2str(yOut),'nE',int2str(nEpochs),'e0',num2str(eta0,3),'eT',num2str(Tau1,3),'s0',num2str(sigma0,3),'sT',num2str(Tau2,3),'no',int2str(randi(100,1)),'nTau',int2str(factorTau1),'.mat');
save([fileName]);


% return 'SoCS_SampleInfo.txt' to unmodified values
if includeValidation
 dlmwrite('SoCS_SampleInfo.txt', dataInfo);
end

%% -------------------------------------------- OTHER MEASURES 

% grid with distances
figure(11)
hold on
title('distance between neurons in the grid');
[D, gridPositions] = FindWeightDistances(xOut, yOut, w, A);
[he,hv] = wgPlot(D,gridPositions);
PlotKohonenMap4(Groups, classType, xOut, yOut, sharedWinners);
hold off
figure(12)
d2w = MinimumDistanceIn2W(xOut, yOut, input, w);
PlotKohonenMap4(Groups, classType, xOut, yOut, sharedWinners);


